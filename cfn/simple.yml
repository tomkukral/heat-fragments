AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Kubernetes on AWS with support of MCP ecosystem
Parameters:
  NodeCluster:
    Description: Reclass model to use
    Type: String
    Default: virtual-mcp11-k8s-calico-dyn
    AllowedValues:
      - virtual-mcp11-k8s-calico-dyn
  SaltMasterInstanceType:
    Description: SaltMaster EC2 instance type
    Type: String
    Default: t2.nano
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.
  NodeInstanceType:
    Description: Kubernetes node EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: 'The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSRegion2AMI:
    eu-west-2:
      image: ami-f1d7c395
    us-west-1:
      image: ami-2afbde4a
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.10.0/24
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.10.0/24
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InboundHTTPNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundSSHNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundResponsePortsNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutBoundHTTPNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  OutBoundHTTPSNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  OutBoundResponsePortsNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1'
        To: '65535'
  SubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref NetworkAcl
  IPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref SaltMasterInstance
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22 and 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

  # Instances
  SaltMasterInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap
        - AWSRegion2AMI
        - !Ref 'AWS::Region'
        - image
      InstanceType: !Ref SaltMasterInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join [ '-', [ !Ref 'AWS::StackName', 'SaltMaster' ] ]
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet
          PrivateIpAddress: 192.168.10.10
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash -xe"
              - "# Install cfn-signal"
              - "apt-get update"
              - "apt-get install -y python-pip"
              - "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz"
              - "# Download Heat templates"
              - "wget -O /tmp/instance_boot.sh https://github.com/tomkukral/heat-fragments/raw/cfn/script/instance_boot.sh"
              - "wget -O /tmp/saltmaster_install.sh https://github.com/tomkukral/heat-fragments/raw/cfn/script/saltmaster_install.sh"
              - "chmod +x /tmp/instance_boot.sh"
              - "chmod +x /tmp/saltmaster_install.sh"
              - "# Set AWS variables"
              - "export aws_instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)"
              - "export aws_resource='SaltMasterInstance'"
              - !Join
                - ''
                - - export aws_region='
                  - !Ref 'AWS::Region'
                  - "'"
              - !Join
                - ''
                - - export aws_stack='
                  - !Ref 'AWS::StackName'
                  - .local
                  - "'"
              - "export node_os='xenial'"
              - !Join
                - ''
                - - export node_hostname="
                  - ctl-
                  - "${aws_instance_id}"
                  - "\""
              - !Join
                - ''
                - - export node_domain='
                  - !Ref 'AWS::StackName'
                  - .local
                  - "'"
              - !Join
                - ''
                - - export node_cluster='
                  - !Ref NodeCluster
                  - "'"
              - "# Set variables"
              - export config_host='127.0.0.1'
              - export instance_cloud_init="$(cat /tmp/saltmaster_install.sh)"
              - "env"
              - "/tmp/instance_boot.sh"

              - !Join
                - ' '
                - - "cfn-signal -s true --resource SaltMasterInstance"
                  - '--stack'
                  - !Ref 'AWS::StackName'
                  - '--region'
                  - !Ref 'AWS::Region'
    CreationPolicy:
          ResourceSignal:
            Timeout: PT10M

  # Minion nodes
  NodeLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - AWSRegion2AMI
        - !Ref 'AWS::Region'
        - image
      InstanceType: !Ref SaltMasterInstanceType
      KeyName: !Ref KeyName
      AssociatePublicIpAddress: 'true'
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash -xe"
              - "apt-get update"
              - "apt-get install -y python-pip"
              - "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz"
              - !Join
                - ' '
                - - "cfn-signal -s true --resource SaltMasterInstance"
                  - '--stack'
                  - !Ref 'AWS::StackName'
                  - '--region'
                  - !Ref 'AWS::Region'
              - "# Download Heat templates"
              - "wget -O /tmp/instance_boot.sh https://github.com/cznewt/heat-fragments/raw/master/script/instance_boot.sh"
              - "wget -O /tmp/saltmaster_install.sh https://github.com/cznewt/heat-fragments/raw/master/script/saltmaster_install.sh"
              - "chmod +x /tmp/instance_boot.sh"
              - "chmod +x /tmp/saltmaster_install.sh"
              - "# Set variables"
              - "export node_os='xenial'"
              - !Join
                - ''
                - - export node_hostname='
                  - ctl01
                  - "'"
              - !Join
                - ''
                - - export node_domain='
                  - !Ref 'AWS::StackName'
                  - .local
                  - "'"
              - !Join
                - ''
                - - export node_cluster='
                  - !Ref NodeCluster
                  - "'"
              - !Join
                - ''
                - - export config_host='
                  - !GetAtt
                    - SaltMasterInstance
                    - PrivateIp
                  - "'"
              - "export instance_cloud_init=date"
              - "env"
              - "/tmp/instance_boot.sh"

  #SaltMinionsScalingGroup:
  #  Type: AWS::AutoScaling::AutoScalingGroup
  #  DependsOn: SaltMasterInstance
  #  Properties:
  #    VPCZoneIdentifier:
  #      - !Ref Subnet
  #    LaunchConfigurationName:
  #      Ref: NodeLaunchConfig
  #    MinSize: '1'
  #    MaxSize: '10'
  #    Tags:
  #      - Key: Application
  #        PropagateAtLaunch: 'true'
  #        Value: !Ref 'AWS::StackId'
  #      - Key: Name
  #        PropagateAtLaunch: 'true'
  #        Value: !Join
  #          - '-'
  #          - - !Ref 'AWS::StackName'
  #            - minion

Outputs:
  SaltMasterIP:
    Value: !Join
      - ''
      - - !GetAtt
          - SaltMasterInstance
          - PublicIp
    Description: Salt API IP
